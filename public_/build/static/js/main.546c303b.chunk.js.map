{"version":3,"sources":["images/quiz-logo.png","services/quiz_app.ts","Components/Quizcard.tsx","firebase.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","getQuizDetail","totalQuestuions","level","a","fetch","res","json","results","quizQues","map","questionObj","question","answer","correct_answer","option","array","incorrect_answers","concat","sort","Math","random","Quizcard","options","callback","quesIncre","useState","userAnswer","setUserAnswer","handleChange","e","target","value","className","onSubmit","opt","ind","key","required","type","name","checked","onChange","onClick","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","override","css","App","messaging","requestPermission","then","getToken","token","console","log","quiz","setquiz","quizIter","setquizIter","score","setScore","final","setFinal","questions","setQuestions","useEffect","fetchData","length","src","quizlogo","alt","preventDefault","size","color","loading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.546c303b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/quiz-logo.a8cdf8d1.png\";","import { Quiz, questionType } from \"../Types/quiz_types\";\n\nconst suffleArray = (array: string[]) =>\n  [...array].sort(() => Math.random() - 0.5);\n\nexport const getQuizDetail = async (\n  totalQuestuions: number,\n  level: string\n): Promise<questionType[]> => {\n  const res = await fetch(\n    `https://opentdb.com/api.php?amount=${totalQuestuions}&category=21&difficulty=${level}&type=multiple`\n  );\n  let { results } = await res.json();\n  let quizQues: questionType[] = results.map((questionObj: Quiz) => {\n    return {\n      question: questionObj.question,\n      answer: questionObj.correct_answer,\n      option: suffleArray(\n        questionObj.incorrect_answers.concat(questionObj.correct_answer)\n      ),\n    };\n  });\n  return quizQues;\n};\n","import React, { useState } from \"react\";\nimport { questionPropsType } from \"../Types/quiz_types\";\nimport \"../App.css\";\n\nconst Quizcard: React.FC<questionPropsType> = ({\n  options,\n  question,\n  callback,\n  answer,\n  quesIncre,\n}) => {\n  let [userAnswer, setUserAnswer] = useState(\"\");\n  const handleChange = (e: any) => {\n    setUserAnswer(e.target.value);\n  };\n  return (\n    <div className=\"Card\">\n      <div className=\"Parag\">\n        <span>\n          <p>\n            <b>Questions {quesIncre}</b>\n          </p>\n        </span>\n\n        <p>{question} </p>\n      </div>\n      <form\n        onSubmit={(e: React.FormEvent<EventTarget>) => callback(e, userAnswer)}\n      >\n        {options.map((opt: string, ind: number) => {\n          return (\n            <div key={ind}>\n              <label>\n                <input\n                  required\n                  type=\"radio\"\n                  name=\"opt\"\n                  value={opt}\n                  checked={userAnswer === opt}\n                  onChange={handleChange}\n                />\n                {opt}\n              </label>\n            </div>\n          );\n        })}\n      </form>\n      <br />\n\n      <br />\n      <div className=\"sub-main\">\n        <button\n          className=\"button-two\"\n          onClick={(e: React.FormEvent<EventTarget>) => callback(e, userAnswer)}\n        >\n          <span>Submit</span>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Quizcard;\n","import firebase from \"firebase\";\nimport { configType } from \"./Types/quiz_types\";\n\nconst config: configType = {\n  apiKey: \"AIzaSyDH368OCf9UFlh_n0nzL7gWfuW71aG1RYc\",\n  authDomain: \"pwa-quiz-app.firebaseapp.com\",\n  databaseURL: \"https://pwa-quiz-app.firebaseio.com\",\n  projectId: \"pwa-quiz-app\",\n  storageBucket: \"pwa-quiz-app.appspot.com\",\n  messagingSenderId: \"489006275593\",\n  appId: \"1:489006275593:web:a38cf81f7afb3e61e2acd8\",\n};\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { getQuizDetail } from \"./services/quiz_app\";\nimport Quizcard from \"./Components/Quizcard\";\nimport { questionType } from \"./Types/quiz_types\";\nimport quizlogo from \"./images/quiz-logo.png\";\nimport { css } from \"@emotion/core\";\nimport BeatLoader from \"react-spinners/RingLoader\";\nimport firebase from \"./firebase\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nfunction App() {\n  const messaging = firebase.messaging();\n  messaging\n    .requestPermission()\n    .then(() => {\n      return messaging.getToken();\n    })\n    .then((token) => {\n      console.log(\"token\", token);\n    });\n  const [quiz, setquiz] = useState<questionType[]>([]);\n  let [quizIter, setquizIter] = useState(0);\n  let [score, setScore] = useState(0);\n  let [final, setFinal] = useState(false);\n  let [questions, setQuestions] = useState(1);\n  useEffect(() => {\n    const fetchData = async () => {\n      const questions = await getQuizDetail(5, \"easy\");\n\n      setquiz(questions);\n    };\n    fetchData();\n  }, []);\n  let afterSubmit = (e: React.FormEvent<EventTarget>, userAnswer: string) => {\n    e.preventDefault();\n    if (userAnswer === quiz[quizIter].answer) {\n      setScore(++score);\n    }\n    if (quizIter !== quiz.length - 1) {\n      setquizIter(++quizIter);\n\n      setQuestions(++questions);\n    } else {\n      setFinal(true);\n    }\n  };\n\n  if (!quiz.length)\n    return (\n      <div className=\"sweet-loading\">\n        <BeatLoader css={override} size={50} color={\"#123abc\"} loading={true} />\n      </div>\n    );\n  if (final) {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <img src={quizlogo} alt=\"heading\" />\n        </div>\n        <h1>Your Total Score is {score}</h1>\n        <h2>\n          {score >= 3 ? \"Congratulation You are Passed\" : \"You aren't passed\"}\n        </h2>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <img src={quizlogo} alt=\"heading\" />\n        </div>\n        <h1>Score : {score}</h1>\n        <div className=\"Quiz\">\n          <Quizcard\n            options={quiz[quizIter].option}\n            question={quiz[quizIter].question}\n            answer={quiz[quizIter].answer}\n            callback={afterSubmit}\n            quesIncre={questions}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}